import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;
import java.util.List;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.PriorityQueue;

public class Main {
    private static void print(List<int[]> list) {
        System.out.println("Ranges");
        for (int[] ele : list) {
            System.out.print(Arrays.toString(ele));
            System.out.print("==>");
        }
        System.out.println();
    }

    private static class MComparator implements Comparator<int[]> {
        @Override public int compare(int[] a1, int[] a2) {
            return (a1[1] - a1[0]) - (a2[1] - a2[0]);
        }
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int m = scan.nextInt();

        PriorityQueue<int[]> q = new PriorityQueue<int[]>(m, new MComparator());

        for (int i = 0; i < m; i++) {
            int[] ele = new int[]{scan.nextInt(), scan.nextInt(), scan.nextInt()};
            q.offer(ele);
        }

        List<int[]> ranges = new LinkedList<int[]>();
        // pivot
        ranges.add(new int[]{n+1, n+2, -1});

        while (!q.isEmpty()) {
            int[] ele = q.poll();
            int ol = ele[0];
            int or = ele[1];
            int ow = ele[2];
            int[][] nele = new int[][]{{ol, ow - 1, ow}, {ow + 1, or, ow}};
            for (int k = 0; k < 2; k++) {
                int l = nele[k][0];
                int r = nele[k][1];
                int w = nele[k][2];
                if (l > r) continue;
                ListIterator<int[]> iter = ranges.listIterator();
                while (iter.hasNext()) {
                    int[] range = iter.next();
                    if (r < range[0]) {
                        iter.previous();
                        iter.add(new int[]{l, r, w});
                        break;
                    } else if (l > range[1]) {
                        continue;
                    } else if (l < range[0]) {
                        iter.previous();
                        iter.add(new int[]{l, range[0] - 1, w});
                        if (r <= range[1]) break;
                        else l = range[1] + 1;
                    } else {
                        if (r <= range[1]) break;
                        else l = range[1] + 1;
                    }
                }
            }
            //print(ranges);
        }
        int size = ranges.size();
        int expect = 1;
        for (int i = 0; i < size; i++) {
            if (ranges.get(i)[0] != expect) {
                ranges.add(i, new int[]{expect, expect, 0});
                break;
            } else {
                expect = ranges.get(i)[1] + 1;
            }
        }
        //print(ranges);
        for (int[] range : ranges) {
            int l = range[0];
            int r = range[1];
            int w = range[2];
            if (l != n + 1) {
                for (int i = l; i <= r; i++) {
                    System.out.print(w + " ");
                }
            }
        }
    }
}
