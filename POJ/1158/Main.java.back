import java.util.Arrays;
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Comparator;

public class Main {
    private static class MComparator implements Comparator<int[]> {
        @Override public int compare(int[] a, int[] b) {
            return a[1] - b[1];
        }
    }

    private static int getCurrentLight(int idx, int time, int[][] junctions) {
        // 0 is B, 1 is purple
        if (time < junctions[idx][1]) {
            // less than remain
            return junctions[idx][0];
        } else {
            int startColor = junctions[idx][0];
            time -= junctions[idx][1];
            int loop = junctions[idx][2] + junctions[idx][3];
            int mod = time % loop;
            if (mod < junctions[idx][3-startColor]) {
                return 1-startColor;
            } else {
                return startColor;
            }
        }
    }

    private static int getNextOppositeLightTime(int idx, int time, int[][] junctions) {
        if (time < junctions[idx][1]) return junctions[idx][1];
        int startColor = junctions[idx][0];
        int nTime = time - junctions[idx][1];
        int loop = junctions[idx][2] + junctions[idx][3];
        int mod = nTime % loop;

        //System.out.println(idx + ",, " + time + ",, " + mod + ",, " + junctions[idx][3-startColor]);
        if (mod < junctions[idx][3-startColor]) {
            return time + junctions[idx][3-startColor] - mod;
        } else {
            return time + loop - mod;
        }
    }

    private static int getNextSameLightTime(int idx1, int idx2, int time, int[][] junctions) {
        int color1 = getCurrentLight(idx1, time, junctions);
        int color2 = getCurrentLight(idx2, time, junctions);
        if (color1 == color2) return time;
        else {
            int time1 = getNextOppositeLightTime(idx1, time, junctions);
            int time2 = getNextOppositeLightTime(idx2, time, junctions);
            //System.out.println("time1: " + time1 + " time2: " + time2);
            int nextTime = Math.min(time1, time2);
            return getNextSameLightTime(idx1, idx2, nextTime, junctions);
        }
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int source = scan.nextInt();
        int sink = scan.nextInt();

        int n = scan.nextInt();
        int m = scan.nextInt();

        int[][] junctions = new int[n+1][4];
        scan.nextLine();
        for (int i = 1; i <= n; i++) {
            String[] tmp = scan.nextLine().split(" ");
            junctions[i][0] = "B".equals(tmp[0]) ? 0 : 1;
            junctions[i][1] = Integer.valueOf(tmp[1]);
            junctions[i][2] = Integer.valueOf(tmp[2]);
            junctions[i][3] = Integer.valueOf(tmp[3]);
        }

        ArrayList<ArrayList<int[]>> map = new ArrayList<ArrayList<int[]>>();
        for (int i = 0; i <= n; i++) map.add(new ArrayList<int[]>());

        for (int i = 1; i <= m; i++) {
            int s = scan.nextInt();
            int e = scan.nextInt();
            int len = scan.nextInt();
            map.get(s).add(new int[]{e, len});
            map.get(e).add(new int[]{s, len});
        }

        PriorityQueue<int[]> pq = new PriorityQueue<int[]>(10, new MComparator());
        pq.offer(new int[]{source, 0});
        int[] times = new int[n+1];
        Arrays.fill(times, Integer.MAX_VALUE);
        times[source] = 0;

        while (!pq.isEmpty()) {
            int[] current = pq.poll();
            ArrayList<int[]> adjs = map.get(current[0]);
            int startTime = current[1];
            int currentJun = current[0];
            for (int[] adj : adjs) {
                int j = adj[0];
                int len = adj[1];
                if (startTime + len >= times[j]) continue;
                int goTime = getNextSameLightTime(currentJun, j, startTime, junctions);
                if (goTime == Integer.MAX_VALUE) continue;
                int expectTime = goTime + len;
                //System.out.println("("+currentJun+","+j+") go time:"+goTime+", expectTime:"+expectTime);
                if (expectTime < times[j]) {
                    times[j] = expectTime;
                    pq.offer(new int[]{j, expectTime});
                }
            }
        }
        //System.out.println(Arrays.toString(times));
        if (times[sink] == Integer.MAX_VALUE) System.out.println(0);
        else System.out.println(times[sink]);
    }
}
